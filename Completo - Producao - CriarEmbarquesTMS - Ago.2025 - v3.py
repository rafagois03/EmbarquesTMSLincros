import pandas as pd
import streamlit as st
import requests
import json
import time
from datetime import datetime, timedelta
import io


# =======================
# CONFIGURA√á√ïES DA P√ÅGINA INICIAL
# =======================

st.set_page_config(
    page_title="Cria√ß√£o de Embarques de Devolu√ß√£o no TMS - 17.Setembro.2025",
    layout="wide"
)

st.title("üöö Criador de Embarques em Massa - TMS - v1")
st.write(
    """
    **Desenvolvedor:** Thiago Nunes e Rafael G√≥is
    \\
    **Descri√ß√£o:** Com esta aplica√ß√£o voc√™ ser√° capaz de criar embarques de *devolu√ß√£o* em massa no TMS Lincros, a partir de dados em uma planilha Excel.
    """
)

ARQUIVO_EXCEL = st.file_uploader(
    "üìÇ Fa√ßa upload do arquivo Excel com as informa√ß√µes do embarque",
    type=["xlsx"]
)

if uploaded_file is not None:
    df = pd.read_excel(uploaded_file, engine="openpyxl")
    df.columns = df.columns.str.lower().str.strip()

    required_columns = {"Protocolo", "CNPJ Unidade", "Calcular Carga", "Agrupar Conhecimentos", "CEP Origem", "CEP Destino", "Data Embarque", "Remetente CNPJ", "Remetente Nome", "Destinat√°rio CNPJ", "Destinat√°rio Nome", "Transportadora CNPJ", "Transportadora Nome", "CNPJ Emissor", "Nota Fiscal", "S√©rie NF", "Documento Chave Acesso", "Pedido S√©rie", "Pedido N√∫mero", "Motorista Documento", "Motorista Nome", "Motorista Tipo Documento", "Observa√ß√£o", "Identificador", "Embarque"}
    if not required_columns.issubset(df.columns):
        st.error(f"Arquivo faltando colunas obrigat√≥rias: {required_columns}")
        st.stop()

    st.success("‚úÖ Arquivo carregado com sucesso!")

# =======================
    # Bot√£o para gerar os embarques
# =======================
    if st.button("üöÄ Gerar Cargas"):
        with st.spinner("‚è≥ Executando otimiza√ß√£o... isso pode levar alguns minutos...")

# =============================
# 1) LOGIN PARA OBTER TOKEN
# =============================
            login_url = "https://ws-tms.lincros.com/api/auth/login"
            login_payload = {
                "login": "thiagonunes910@hotmail.com",
                "senha": "Lincros@25"
            }
            login_headers = {
                "accept": "text/plain",
                "Content-Type": "application/json"
            }
            
            st.write("üîê Realizando login...")
            resp = requests.post(login_url, json=login_payload, headers=login_headers)
            
            if resp.status_code != 200:
                st.write("‚ùå Falha no login:", resp.status_code, resp.text)
                exit()
            
            token = "B43Xe6ZwE6vxjOG2LPOIJZ0Z0ktMg1xEQ8ZYnoU3I8" # token novo fixo
            st.write("‚úÖ Login recebido com sucesso!")
            
            
            data_hoje = datetime.now()
            data_vencimento = (data_hoje + timedelta(days=30)).strftime("%Y-%m-%d")
            
            # =============================
            # 2) CRIAR EMBARQUES
            # =============================
            url_criar_embarque = "https://ws-tms.lincros.com/api/embarque/criarAsync"
            
            # Ler planilha
            df = pd.read_excel(ARQUIVO_EXCEL)
            
            # Garantir colunas de controle
            for col in ["Protocolo", "Embarque", "FreteSPOT"]:
                if col not in df.columns:
                    df[col] = None
            
            embarques_json = []
            linhas_processadas = []  # Armazena os √≠ndices que foram processados nesta execu√ß√£o
            
            st.write("\nüîç Analisando linhas para criar embarque...\n")
            
            for idx, row in df.iterrows():
                protocolo = row["Protocolo"]
                embarque = row["Embarque"]
            
                # Pular se j√° tiver protocolo ou n√∫mero de embarque
                if pd.notna(protocolo) or pd.notna(embarque):
                    st.write(f"üö´ Linha {idx + 2}: J√° processada ‚Äî pulando.")
                    continue
            
                # Marcar para processar
                linhas_processadas.append(idx)
                st.write(f"‚úÖ Linha {idx + 2}: Criando embarque...")
            
                try:
                    chave_acesso = str(row["Documento Chave Acesso"]).strip()
                    if chave_acesso.lower() in ["nan", ""]:
                        chave_acesso = None
                except:
                    chave_acesso = None
            
                # Montar payload do embarque
                embarque_data = {
                    "cnpjUnidade": str(row["CNPJ Unidade"]).strip(),
                    "calcularcarga": False,
                    "agruparConhecimentos": True,
                    "remetente": {
                        "cnpj": str(row["Remetente CNPJ"]).strip(),
                        "marcadores": ["DEVOLUCAO"]
                    },
                    "destinatario": {
                        "cnpj": str(row["Destinat√°rio CNPJ"]).strip(),
                        "marcadores": ["DEVOLUCAO"]
                    },
                    "transportadora": {
                        "cnpj": str(row["Transportadora CNPJ"]).strip(),
                        "marcadores": ["DEVOLUCAO"]
                    },
                    "cepOrigem": int(row["CEP Origem"]),
                    "cepDestino": int(row["CEP Destino"]),
                    "documentos": [
                        {
                            "tipoDocumento": 0,
                            "cnpjEmissor": int(row["CNPJ Emissor"]),
                            "numeroDocumento": int(row["Nota Fiscal"]),
                            "serie": int(row["S√©rie NF"]),
                            "chaveAcesso": chave_acesso,
                            "tipoConhecimento": 3,
                            "grupoVeiculo": "3517"
                        }
                    ],
                    
                    "marcadores": ["DEVOLUCAO"],
                    "grupoVeiculo": "3517",
                    "observacao": str(row.get("Observa√ß√£o", "")).strip(),
                    "identificador": str(row.get("Identificador", "")).strip(),
                    "motoristas": [
                        {
                            "documento": str(row.get("Motorista Documento", "")).strip(),
                            "nome": str(row.get("Motorista Nome", "")).strip(),
                            "tipoDocumento": int(row.get("Motorista Tipo Documento", 1))
                        }
                    ]
                }
                embarques_json.append(embarque_data)
            
            # Enviar embarques
            if embarques_json:
                payload_envio = {"embarques": embarques_json}
                headers_envio = {
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {token}"
                }
            
                st.write(f"\nüì§ Enviando {len(embarques_json)} embarque(s)...")
                response = requests.post(url_criar_embarque, json=payload_envio, headers=headers_envio)
                st.write("Status code:", response.status_code)
            
                if response.status_code == 200:
                    protocolos = response.json().get("protocolo", [])
                    if protocolos and len(protocolos) == len(embarques_json):
                        # Atualiza apenas as linhas processadas
                        for i, idx in enumerate(linhas_processadas):
                            df.at[idx, "Protocolo"] = protocolos[i]
                        st.write(f"‚úÖ {len(protocolos)} protocolo(s) vinculados.")
                    else:
                        st.write("‚ö†Ô∏è N√∫mero de protocolos n√£o corresponde ao esperado.")
                else:
                    st.write("‚ùå Falha ao criar embarques:", response.text)
                    exit()
            else:
                st.write("‚úÖ Nenhum embarque novo para criar.")
            
            # Salvar protocolos
            df.to_excel(ARQUIVO_EXCEL, index=False)
            st.write(f"üìÑ Planilha salva com protocolos atualizados.")
            
            
            # =============================
            # 3) BUSCAR OID EMBARQUE PELO PROTOCOLO
            # =============================
            st.write("\n‚è≥ Aguardando 15 segundos antes de buscar os OIDs...")
            time.sleep(15)
            
            def obter_token_busca():
                url = "https://ws-tms.lincros.com/api/auth/login"
                headers = {
                    "accept": "text/plain",
                    "Content-Type": "application/json"
                }
                payload = {
                    "login": "thiagonunes910@hotmail.com",
                    "senha": "Lincros@25"
                }
                try:
                    resp = requests.post(url, json=payload, headers=headers)
                    if resp.status_code == 200:
                        return resp.text.strip()
                    else:
                        st.write("‚ùå Falha ao obter token de busca:", resp.text)
                        return None
                except Exception as e:
                    st.write("‚ùå Erro de conex√£o:", e)
                    return None
            
            def buscar_oid(token, protocolo):
                url = "https://ws-tms.lincros.com/api/embarque/recuperarDados"
                headers = {
                    "accept": "application/json",
                    "Authorization": f"Bearer {token}",
                    "Content-Type": "application/json"
                }
                try:
                    resp = requests.post(url, json={"protocolo": protocolo}, headers=headers)
                    if resp.status_code == 200:
                        dados = resp.json()
                        return dados.get("embarque", {}).get("oidEmbarque")
                    else:
                        st.write(f"‚ùå Erro na API ({protocolo}): {resp.status_code} - {resp.text[:200]}")
                        return None
                except Exception as e:
                    st.write(f"‚ùå Exce√ß√£o ao buscar OID ({protocolo}): {e}")
                    return None
            
            # Obter token
            token_busca = obter_token_busca()
            if not token_busca:
                st.write("‚ùå N√£o foi poss√≠vel continuar a busca do OID.")
                exit()
            
            # Buscar OID para cada linha com protocolo novo
            st.write("\nüîÑ Buscando OID dos embarques...\n")
            for idx, row in df.iterrows():
                if pd.isna(row["Protocolo"]) or not pd.isna(row["Embarque"]):
                    continue  # j√° tem ou n√£o tem protocolo
            
                try:
                    protocolo = int(row["Protocolo"])
                    oid = buscar_oid(token_busca, protocolo)
                    if oid:
                        df.at[idx, "Embarque"] = int(oid)
                        st.write(f"‚úîÔ∏è Linha {idx + 2}: Embarque {oid} vinculado.")
                    else:
                        df.at[idx, "Embarque"] = None
                except Exception as e:
                    st.write(f"‚ùå Erro ao processar linha {idx + 2}: {e}")
                    df.at[idx, "Embarque"] = None
            
            # Salvar
            df.to_excel(ARQUIVO_EXCEL, index=False)
            st.write(f"üìÑ Planilha atualizada com n√∫meros de embarque.")


# =============================
# 5) SALVAR FINAL
# =============================
            df.to_excel(ARQUIVO_EXCEL, index=False)
            st.write(f"\n‚úÖ Processo completo! Planilha final salva em: {ARQUIVO_EXCEL}")
            
            st.write("üéâ Embarque ‚Üí Protocolo ‚Üí Embarque ID  ‚Üí Conclu√≠do!")



###############################
# 6) DOWNLOAD ARQUIVO FINAL
###############################



            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                ARQUIVO_EXCEL.to_excel(writer, sheet_name='BASE DE EMBARQUES', index=False)
    
            st.download_button(
                "üì• Baixar Excel",
                data=output.getvalue(),
                file_name="EMBARQUES_GERADOS TMS.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
